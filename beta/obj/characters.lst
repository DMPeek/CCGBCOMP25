                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.1 #15267 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module characters
                                      6 	
                                      7 ;--------------------------------------------------------
                                      8 ; Public variables in this module
                                      9 ;--------------------------------------------------------
                                     10 	.globl _joypad
                                     11 	.globl _player1
                                     12 	.globl _loadSpriteFrame
                                     13 	.globl _moveCharacter
                                     14 	.globl _scrollCharacter
                                     15 	.globl _moveCharacterWithLR
                                     16 	.globl _moveCharacterWithAB
                                     17 	.globl _setupCharacter
                                     18 ;--------------------------------------------------------
                                     19 ; special function registers
                                     20 ;--------------------------------------------------------
                                     21 ;--------------------------------------------------------
                                     22 ; ram data
                                     23 ;--------------------------------------------------------
                                     24 	.area _DATA
    00000000                         25 _player1::
    00000000                         26 	.ds 12
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area _INITIALIZED
                                     31 ;--------------------------------------------------------
                                     32 ; absolute external ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area _DABS (ABS)
                                     35 ;--------------------------------------------------------
                                     36 ; global & static initialisations
                                     37 ;--------------------------------------------------------
                                     38 	.area _HOME
                                     39 	.area _GSINIT
                                     40 	.area _GSFINAL
                                     41 	.area _GSINIT
                                     42 ;--------------------------------------------------------
                                     43 ; Home
                                     44 ;--------------------------------------------------------
                                     45 	.area _HOME
                                     46 	.area _HOME
                                     47 ;--------------------------------------------------------
                                     48 ; code
                                     49 ;--------------------------------------------------------
                                     50 	.area _CODE
                                     51 ;sprites/characters.c:5: void loadSpriteFrame(Character *character,uint8_t frame) 
                                     52 ;	---------------------------------
                                     53 ; Function loadSpriteFrame
                                     54 ; ---------------------------------
    00000000                         55 _loadSpriteFrame::
    00000000 E8 F4            [16]   56 	add	sp, #-12
    00000002 4B               [ 4]   57 	ld	c, e
    00000003 42               [ 4]   58 	ld	b, d
    00000004 57               [ 4]   59 	ld	d, a
                                     60 ;sprites/characters.c:7: character->spriteCurrentFrame = frame;
    00000005 21 04 00         [12]   61 	ld	hl, #0x0004
    00000008 09               [ 8]   62 	add	hl, bc
    00000009 72               [ 8]   63 	ld	(hl), d
                                     64 ;sprites/characters.c:9: uint8_t spriteCount = character->spriteTileWidth * character->spriteTileHeight;
    0000000A 69               [ 4]   65 	ld	l, c
    0000000B 60               [ 4]   66 	ld	h, b
    0000000C 23               [ 8]   67 	inc	hl
    0000000D 7E               [ 8]   68 	ld	a, (hl)
    0000000E 69               [ 4]   69 	ld	l, c
    0000000F 60               [ 4]   70 	ld	h, b
    00000010 23               [ 8]   71 	inc	hl
    00000011 23               [ 8]   72 	inc	hl
    00000012 5E               [ 8]   73 	ld	e, (hl)
    00000013 C5               [16]   74 	push	bc
    00000014 D5               [16]   75 	push	de
                                     76 ;sprites/characters.c:11: for (uint8_t i=0; i != spriteCount; i++) 
    00000015 CDr00r00         [24]   77 	call	__muluchar
    00000018 F8 04            [12]   78 	ldhl	sp,	#4
    0000001A 71               [ 8]   79 	ld	(hl), c
    0000001B D1               [12]   80 	pop	de
    0000001C C1               [12]   81 	pop	bc
    0000001D 21 0A 00         [12]   82 	ld	hl, #0x000a
    00000020 09               [ 8]   83 	add	hl, bc
    00000021 E5               [16]   84 	push	hl
    00000022 7D               [ 4]   85 	ld	a, l
    00000023 F8 03            [12]   86 	ldhl	sp,	#3
    00000025 77               [ 8]   87 	ld	(hl), a
    00000026 E1               [12]   88 	pop	hl
    00000027 7C               [ 4]   89 	ld	a, h
    00000028 F8 02            [12]   90 	ldhl	sp,	#2
    0000002A 77               [ 8]   91 	ld	(hl), a
    0000002B 21 05 00         [12]   92 	ld	hl, #0x0005
    0000002E 09               [ 8]   93 	add	hl, bc
    0000002F E5               [16]   94 	push	hl
    00000030 7D               [ 4]   95 	ld	a, l
    00000031 F8 05            [12]   96 	ldhl	sp,	#5
    00000033 77               [ 8]   97 	ld	(hl), a
    00000034 E1               [12]   98 	pop	hl
    00000035 7C               [ 4]   99 	ld	a, h
    00000036 F8 04            [12]  100 	ldhl	sp,	#4
    00000038 77               [ 8]  101 	ld	(hl), a
    00000039 C5               [16]  102 	push	bc
    0000003A F8 02            [12]  103 	ldhl	sp,	#2
    0000003C 5E               [ 8]  104 	ld	e, (hl)
    0000003D 7A               [ 4]  105 	ld	a, d
    0000003E CDr00r00         [24]  106 	call	__muluchar
    00000041 F8 07            [12]  107 	ldhl	sp,	#7
    00000043 79               [ 4]  108 	ld	a, c
    00000044 22               [ 8]  109 	ld	(hl+), a
    00000045 70               [ 8]  110 	ld	(hl), b
    00000046 C1               [12]  111 	pop	bc
    00000047 F8 0B            [12]  112 	ldhl	sp,	#11
    00000049 36 00            [12]  113 	ld	(hl), #0x00
    0000004B                        114 00104$:
    0000004B F8 00            [12]  115 	ldhl	sp,	#0
    0000004D 7E               [ 8]  116 	ld	a, (hl)
    0000004E F8 0B            [12]  117 	ldhl	sp,	#11
    00000050 96               [ 8]  118 	sub	a, (hl)
    00000051 28 4B            [12]  119 	jr	Z, 00106$
                                    120 ;sprites/characters.c:15: set_sprite_tile(character->spriteId + i, character->tilemap[character->tileSetStart + i + (frame * spriteCount)]);
    00000053 F8 01            [12]  121 	ldhl	sp,#1
    00000055 2A               [ 8]  122 	ld	a, (hl+)
    00000056 5F               [ 4]  123 	ld	e, a
    00000057 56               [ 8]  124 	ld	d, (hl)
    00000058 1A               [ 8]  125 	ld	a, (de)
    00000059 F8 07            [12]  126 	ldhl	sp,	#7
    0000005B 22               [ 8]  127 	ld	(hl+), a
    0000005C 13               [ 8]  128 	inc	de
    0000005D 1A               [ 8]  129 	ld	a, (de)
    0000005E 77               [ 8]  130 	ld	(hl), a
    0000005F F8 03            [12]  131 	ldhl	sp,#3
    00000061 2A               [ 8]  132 	ld	a, (hl+)
    00000062 5F               [ 4]  133 	ld	e, a
    00000063 56               [ 8]  134 	ld	d, (hl)
    00000064 1A               [ 8]  135 	ld	a, (de)
    00000065 F8 09            [12]  136 	ldhl	sp,	#9
    00000067 22               [ 8]  137 	ld	(hl+), a
    00000068 AF               [ 4]  138 	xor	a, a
    00000069 22               [ 8]  139 	ld	(hl+), a
    0000006A 3A               [ 8]  140 	ld	a, (hl-)
    0000006B 5F               [ 4]  141 	ld	e, a
    0000006C 16 00            [ 8]  142 	ld	d, #0x00
    0000006E 3A               [ 8]  143 	ld	a, (hl-)
    0000006F 6E               [ 8]  144 	ld	l, (hl)
    00000070 67               [ 4]  145 	ld	h, a
    00000071 19               [ 8]  146 	add	hl, de
    00000072 5D               [ 4]  147 	ld	e, l
    00000073 54               [ 4]  148 	ld	d, h
    00000074 F8 05            [12]  149 	ldhl	sp,	#5
    00000076 2A               [ 8]  150 	ld	a,	(hl+)
    00000077 66               [ 8]  151 	ld	h, (hl)
    00000078 6F               [ 4]  152 	ld	l, a
    00000079 19               [ 8]  153 	add	hl, de
    0000007A 5D               [ 4]  154 	ld	e, l
    0000007B 54               [ 4]  155 	ld	d, h
    0000007C F8 07            [12]  156 	ldhl	sp,	#7
    0000007E 2A               [ 8]  157 	ld	a,	(hl+)
    0000007F 66               [ 8]  158 	ld	h, (hl)
    00000080 6F               [ 4]  159 	ld	l, a
    00000081 19               [ 8]  160 	add	hl, de
    00000082 5D               [ 4]  161 	ld	e, l
    00000083 54               [ 4]  162 	ld	d, h
    00000084 1A               [ 8]  163 	ld	a, (de)
    00000085 5F               [ 4]  164 	ld	e, a
    00000086 0A               [ 8]  165 	ld	a, (bc)
    00000087 F8 0B            [12]  166 	ldhl	sp,	#11
    00000089 86               [ 8]  167 	add	a, (hl)
    0000008A 57               [ 4]  168 	ld	d, a
                                    169 ;/home/dij/d/c/gbdk/include/gb/gb.h:1887: shadow_OAM[nb].tile=tile;
    0000008B AF               [ 4]  170 	xor	a, a
    0000008C 6A               [ 4]  171 	ld	l, d
    0000008D 67               [ 4]  172 	ld	h, a
    0000008E 29               [ 8]  173 	add	hl, hl
    0000008F 29               [ 8]  174 	add	hl, hl
    00000090 D5               [16]  175 	push	de
    00000091 11r00r00         [12]  176 	ld	de, #_shadow_OAM
    00000094 19               [ 8]  177 	add	hl, de
    00000095 23               [ 8]  178 	inc	hl
    00000096 23               [ 8]  179 	inc	hl
    00000097 D1               [12]  180 	pop	de
    00000098 73               [ 8]  181 	ld	(hl), e
                                    182 ;sprites/characters.c:11: for (uint8_t i=0; i != spriteCount; i++) 
    00000099 F8 0B            [12]  183 	ldhl	sp,	#11
    0000009B 34               [12]  184 	inc	(hl)
    0000009C 18 AD            [12]  185 	jr	00104$
    0000009E                        186 00106$:
                                    187 ;sprites/characters.c:18: }
    0000009E E8 0C            [16]  188 	add	sp, #12
    000000A0 C9               [16]  189 	ret
                                    190 ;sprites/characters.c:20: void moveCharacter(Character *character, uint8_t x, uint8_t y)
                                    191 ;	---------------------------------
                                    192 ; Function moveCharacter
                                    193 ; ---------------------------------
    000000A1                        194 _moveCharacter::
    000000A1 E8 F7            [16]  195 	add	sp, #-9
    000000A3 4B               [ 4]  196 	ld	c, e
    000000A4 42               [ 4]  197 	ld	b, d
    000000A5 F8 06            [12]  198 	ldhl	sp,	#6
    000000A7 77               [ 8]  199 	ld	(hl), a
                                    200 ;sprites/characters.c:22: character->x_pos = x;
    000000A8 21 06 00         [12]  201 	ld	hl, #0x0006
    000000AB 09               [ 8]  202 	add	hl, bc
    000000AC 5D               [ 4]  203 	ld	e, l
    000000AD 54               [ 4]  204 	ld	d, h
    000000AE F8 06            [12]  205 	ldhl	sp,	#6
    000000B0 7E               [ 8]  206 	ld	a, (hl)
    000000B1 12               [ 8]  207 	ld	(de), a
                                    208 ;sprites/characters.c:23: character->y_pos = y;
    000000B2 21 07 00         [12]  209 	ld	hl, #0x0007
    000000B5 09               [ 8]  210 	add	hl, bc
    000000B6 5D               [ 4]  211 	ld	e, l
    000000B7 54               [ 4]  212 	ld	d, h
    000000B8 F8 0B            [12]  213 	ldhl	sp,	#11
    000000BA 7E               [ 8]  214 	ld	a, (hl)
    000000BB 12               [ 8]  215 	ld	(de), a
                                    216 ;sprites/characters.c:25: for(uint8_t iy = 0; iy != character->spriteTileHeight; iy++){
    000000BC 69               [ 4]  217 	ld	l, c
    000000BD 60               [ 4]  218 	ld	h, b
    000000BE 23               [ 8]  219 	inc	hl
    000000BF 33               [ 8]  220 	inc	sp
    000000C0 33               [ 8]  221 	inc	sp
    000000C1 E5               [16]  222 	push	hl
    000000C2 21 02 00         [12]  223 	ld	hl, #0x0002
    000000C5 09               [ 8]  224 	add	hl, bc
    000000C6 E5               [16]  225 	push	hl
    000000C7 7D               [ 4]  226 	ld	a, l
    000000C8 F8 04            [12]  227 	ldhl	sp,	#4
    000000CA 77               [ 8]  228 	ld	(hl), a
    000000CB E1               [12]  229 	pop	hl
    000000CC 7C               [ 4]  230 	ld	a, h
    000000CD F8 03            [12]  231 	ldhl	sp,	#3
    000000CF 77               [ 8]  232 	ld	(hl), a
    000000D0 F8 07            [12]  233 	ldhl	sp,	#7
    000000D2 36 00            [12]  234 	ld	(hl), #0x00
    000000D4                        235 00108$:
    000000D4 F8 02            [12]  236 	ldhl	sp,#2
    000000D6 2A               [ 8]  237 	ld	a, (hl+)
    000000D7 5F               [ 4]  238 	ld	e, a
    000000D8 56               [ 8]  239 	ld	d, (hl)
    000000D9 1A               [ 8]  240 	ld	a, (de)
    000000DA F8 07            [12]  241 	ldhl	sp,	#7
    000000DC 96               [ 8]  242 	sub	a, (hl)
    000000DD 28 5B            [12]  243 	jr	Z, 00110$
                                    244 ;sprites/characters.c:26: for(uint8_t ix = 0; ix != character->spriteTileWidth; ix++){
    000000DF F8 08            [12]  245 	ldhl	sp,	#8
    000000E1 36 00            [12]  246 	ld	(hl), #0x00
    000000E3                        247 00105$:
    000000E3 D1               [12]  248 	pop	de
    000000E4 D5               [16]  249 	push	de
    000000E5 1A               [ 8]  250 	ld	a, (de)
    000000E6 F8 05            [12]  251 	ldhl	sp,	#5
    000000E8 77               [ 8]  252 	ld	(hl), a
    000000E9 F8 08            [12]  253 	ldhl	sp,	#8
    000000EB 7E               [ 8]  254 	ld	a, (hl)
    000000EC F8 05            [12]  255 	ldhl	sp,	#5
    000000EE 96               [ 8]  256 	sub	a, (hl)
    000000EF 28 44            [12]  257 	jr	Z, 00109$
                                    258 ;sprites/characters.c:28: uint8_t index = character->spriteId + ix + (iy * character->spriteTileWidth);
    000000F1 0A               [ 8]  259 	ld	a, (bc)
    000000F2 F8 08            [12]  260 	ldhl	sp,	#8
    000000F4 86               [ 8]  261 	add	a, (hl)
    000000F5 57               [ 4]  262 	ld	d, a
    000000F6 C5               [16]  263 	push	bc
    000000F7 D5               [16]  264 	push	de
    000000F8 F8 09            [12]  265 	ldhl	sp,	#9
    000000FA 2A               [ 8]  266 	ld	a, (hl+)
    000000FB 23               [ 8]  267 	inc	hl
    000000FC 5F               [ 4]  268 	ld	e, a
    000000FD 7E               [ 8]  269 	ld	a, (hl)
    000000FE CDr00r00         [24]  270 	call	__muluchar
    00000101 79               [ 4]  271 	ld	a, c
    00000102 D1               [12]  272 	pop	de
    00000103 C1               [12]  273 	pop	bc
    00000104 82               [ 4]  274 	add	a, d
    00000105 5F               [ 4]  275 	ld	e, a
                                    276 ;sprites/characters.c:30: move_sprite(index, x + (ix * 8), y + (iy * 8));
    00000106 F8 07            [12]  277 	ldhl	sp,	#7
    00000108 7E               [ 8]  278 	ld	a, (hl)
    00000109 87               [ 4]  279 	add	a, a
    0000010A 87               [ 4]  280 	add	a, a
    0000010B 87               [ 4]  281 	add	a, a
    0000010C F8 0B            [12]  282 	ldhl	sp,	#11
    0000010E 56               [ 8]  283 	ld	d, (hl)
    0000010F 82               [ 4]  284 	add	a, d
    00000110 F8 04            [12]  285 	ldhl	sp,	#4
    00000112 77               [ 8]  286 	ld	(hl), a
    00000113 F8 08            [12]  287 	ldhl	sp,	#8
    00000115 3A               [ 8]  288 	ld	a, (hl-)
    00000116 2B               [ 8]  289 	dec	hl
    00000117 87               [ 4]  290 	add	a, a
    00000118 87               [ 4]  291 	add	a, a
    00000119 87               [ 4]  292 	add	a, a
    0000011A 56               [ 8]  293 	ld	d, (hl)
    0000011B 2B               [ 8]  294 	dec	hl
    0000011C 82               [ 4]  295 	add	a, d
    0000011D 77               [ 8]  296 	ld	(hl), a
                                    297 ;/home/dij/d/c/gbdk/include/gb/gb.h:1973: OAM_item_t * itm = &shadow_OAM[nb];
    0000011E AF               [ 4]  298 	xor	a, a
    0000011F 6B               [ 4]  299 	ld	l, e
    00000120 67               [ 4]  300 	ld	h, a
    00000121 29               [ 8]  301 	add	hl, hl
    00000122 29               [ 8]  302 	add	hl, hl
    00000123 11r00r00         [12]  303 	ld	de, #_shadow_OAM
    00000126 19               [ 8]  304 	add	hl, de
    00000127 5D               [ 4]  305 	ld	e, l
    00000128 54               [ 4]  306 	ld	d, h
                                    307 ;/home/dij/d/c/gbdk/include/gb/gb.h:1974: itm->y=y, itm->x=x;
    00000129 F8 04            [12]  308 	ldhl	sp,	#4
    0000012B 2A               [ 8]  309 	ld	a, (hl+)
    0000012C 12               [ 8]  310 	ld	(de), a
    0000012D 13               [ 8]  311 	inc	de
    0000012E 7E               [ 8]  312 	ld	a, (hl)
    0000012F 12               [ 8]  313 	ld	(de), a
                                    314 ;sprites/characters.c:26: for(uint8_t ix = 0; ix != character->spriteTileWidth; ix++){
    00000130 F8 08            [12]  315 	ldhl	sp,	#8
    00000132 34               [12]  316 	inc	(hl)
    00000133 18 AE            [12]  317 	jr	00105$
    00000135                        318 00109$:
                                    319 ;sprites/characters.c:25: for(uint8_t iy = 0; iy != character->spriteTileHeight; iy++){
    00000135 F8 07            [12]  320 	ldhl	sp,	#7
    00000137 34               [12]  321 	inc	(hl)
    00000138 18 9A            [12]  322 	jr	00108$
    0000013A                        323 00110$:
                                    324 ;sprites/characters.c:33: }
    0000013A E8 09            [16]  325 	add	sp, #9
    0000013C E1               [12]  326 	pop	hl
    0000013D 33               [ 8]  327 	inc	sp
    0000013E E9               [ 4]  328 	jp	(hl)
                                    329 ;sprites/characters.c:36: void scrollCharacter(Character *character, uint8_t x, uint8_t y) 
                                    330 ;	---------------------------------
                                    331 ; Function scrollCharacter
                                    332 ; ---------------------------------
    0000013F                        333 _scrollCharacter::
    0000013F D5               [16]  334 	push	de
    00000140 5F               [ 4]  335 	ld	e, a
                                    336 ;sprites/characters.c:38: character->x_pos += x;
    00000141 D5               [16]  337 	push	de
    00000142 F8 02            [12]  338 	ldhl	sp,#2
    00000144 2A               [ 8]  339 	ld	a, (hl+)
    00000145 5F               [ 4]  340 	ld	e, a
    00000146 56               [ 8]  341 	ld	d, (hl)
    00000147 21 06 00         [12]  342 	ld	hl, #0x0006
    0000014A 19               [ 8]  343 	add	hl, de
    0000014B D1               [12]  344 	pop	de
    0000014C 4D               [ 4]  345 	ld	c, l
    0000014D 44               [ 4]  346 	ld	b, h
    0000014E 0A               [ 8]  347 	ld	a, (bc)
    0000014F 83               [ 4]  348 	add	a, e
    00000150 02               [ 8]  349 	ld	(bc), a
                                    350 ;sprites/characters.c:39: character->y_pos += y;
    00000151 D1               [12]  351 	pop	de
    00000152 D5               [16]  352 	push	de
    00000153 21 07 00         [12]  353 	ld	hl, #0x0007
    00000156 19               [ 8]  354 	add	hl, de
    00000157 5D               [ 4]  355 	ld	e, l
    00000158 54               [ 4]  356 	ld	d, h
    00000159 1A               [ 8]  357 	ld	a, (de)
    0000015A F8 04            [12]  358 	ldhl	sp,	#4
    0000015C 86               [ 8]  359 	add	a, (hl)
    0000015D 12               [ 8]  360 	ld	(de), a
                                    361 ;sprites/characters.c:41: moveCharacter(character, character->x_pos, character->y_pos);
    0000015E F5               [16]  362 	push	af
    0000015F 0A               [ 8]  363 	ld	a, (bc)
    00000160 4F               [ 4]  364 	ld	c, a
    00000161 33               [ 8]  365 	inc	sp
    00000162 79               [ 4]  366 	ld	a, c
    00000163 F8 01            [12]  367 	ldhl	sp,	#1
    00000165 5E               [ 8]  368 	ld	e, (hl)
    00000166 23               [ 8]  369 	inc	hl
    00000167 56               [ 8]  370 	ld	d, (hl)
                                    371 ;sprites/characters.c:42: }
    00000168 CDrA1r00         [24]  372 	call	_moveCharacter
    0000016B E1               [12]  373 	pop	hl
    0000016C E1               [12]  374 	pop	hl
    0000016D 33               [ 8]  375 	inc	sp
    0000016E E9               [ 4]  376 	jp	(hl)
                                    377 ;sprites/characters.c:44: void moveCharacterWithLR(Character *character) 
                                    378 ;	---------------------------------
                                    379 ; Function moveCharacterWithLR
                                    380 ; ---------------------------------
    0000016F                        381 _moveCharacterWithLR::
                                    382 ;sprites/characters.c:46: uint8_t buttons = joypad();
    0000016F D5               [16]  383 	push	de
    00000170 CDr00r00         [24]  384 	call	_joypad
    00000173 D1               [12]  385 	pop	de
                                    386 ;sprites/characters.c:48: uint8_t moveX = 0;
    00000174 0E 00            [ 8]  387 	ld	c, #0x00
                                    388 ;sprites/characters.c:51: if (buttons & J_LEFT){
    00000176 CB 4F            [ 8]  389 	bit	1, a
    00000178 28 04            [12]  390 	jr	Z, 00104$
                                    391 ;sprites/characters.c:52: moveX = -1;
    0000017A 0E FF            [ 8]  392 	ld	c, #0xff
    0000017C 18 05            [12]  393 	jr	00105$
    0000017E                        394 00104$:
                                    395 ;sprites/characters.c:54: else if (buttons & J_RIGHT){
    0000017E 0F               [ 4]  396 	rrca
    0000017F 30 02            [12]  397 	jr	NC, 00105$
                                    398 ;sprites/characters.c:55: moveX = 1;
    00000181 0E 01            [ 8]  399 	ld	c, #0x01
    00000183                        400 00105$:
                                    401 ;sprites/characters.c:57: scrollCharacter(character, moveX, moveY);
    00000183 AF               [ 4]  402 	xor	a, a
    00000184 F5               [16]  403 	push	af
    00000185 33               [ 8]  404 	inc	sp
    00000186 79               [ 4]  405 	ld	a, c
    00000187 CDr3Fr01         [24]  406 	call	_scrollCharacter
                                    407 ;sprites/characters.c:58: }
    0000018A C9               [16]  408 	ret
                                    409 ;sprites/characters.c:60: void moveCharacterWithAB(Character *character) 
                                    410 ;	---------------------------------
                                    411 ; Function moveCharacterWithAB
                                    412 ; ---------------------------------
    0000018B                        413 _moveCharacterWithAB::
                                    414 ;sprites/characters.c:62: uint8_t buttons = joypad();  
    0000018B D5               [16]  415 	push	de
    0000018C CDr00r00         [24]  416 	call	_joypad
    0000018F D1               [12]  417 	pop	de
                                    418 ;sprites/characters.c:64: uint8_t moveX = 0;
    00000190 0E 00            [ 8]  419 	ld	c, #0x00
                                    420 ;sprites/characters.c:67: if (buttons & J_A){
    00000192 CB 67            [ 8]  421 	bit	4, a
    00000194 28 04            [12]  422 	jr	Z, 00104$
                                    423 ;sprites/characters.c:68: moveX = -1;
    00000196 0E FF            [ 8]  424 	ld	c, #0xff
    00000198 18 06            [12]  425 	jr	00105$
    0000019A                        426 00104$:
                                    427 ;sprites/characters.c:70: else if (buttons & J_B){
    0000019A CB 6F            [ 8]  428 	bit	5, a
    0000019C 28 02            [12]  429 	jr	Z, 00105$
                                    430 ;sprites/characters.c:71: moveX = 1;
    0000019E 0E 01            [ 8]  431 	ld	c, #0x01
    000001A0                        432 00105$:
                                    433 ;sprites/characters.c:73: scrollCharacter(character, moveX, moveY);
    000001A0 AF               [ 4]  434 	xor	a, a
    000001A1 F5               [16]  435 	push	af
    000001A2 33               [ 8]  436 	inc	sp
    000001A3 79               [ 4]  437 	ld	a, c
    000001A4 CDr3Fr01         [24]  438 	call	_scrollCharacter
                                    439 ;sprites/characters.c:74: }
    000001A7 C9               [16]  440 	ret
                                    441 ;sprites/characters.c:76: void setupCharacter (Character *character, uint8_t spriteId, uint8_t tileWidth, uint8_t tileHeight, uint8_t tileSetStart, uint8_t totalFrames, const unsigned char *tilemap) 
                                    442 ;	---------------------------------
                                    443 ; Function setupCharacter
                                    444 ; ---------------------------------
    000001A8                        445 _setupCharacter::
    000001A8 4F               [ 4]  446 	ld	c, a
                                    447 ;sprites/characters.c:78: character->tilemap = tilemap;
    000001A9 21 0A 00         [12]  448 	ld	hl, #0x000a
    000001AC 19               [ 8]  449 	add	hl, de
    000001AD E5               [16]  450 	push	hl
    000001AE F8 08            [12]  451 	ldhl	sp,	#8
    000001B0 7E               [ 8]  452 	ld	a, (hl)
    000001B1 E1               [12]  453 	pop	hl
    000001B2 22               [ 8]  454 	ld	(hl+), a
    000001B3 E5               [16]  455 	push	hl
    000001B4 F8 09            [12]  456 	ldhl	sp,	#9
    000001B6 7E               [ 8]  457 	ld	a, (hl)
    000001B7 E1               [12]  458 	pop	hl
    000001B8 77               [ 8]  459 	ld	(hl), a
                                    460 ;sprites/characters.c:80: character->tileSetStart = tileSetStart;
    000001B9 21 05 00         [12]  461 	ld	hl, #0x0005
    000001BC 19               [ 8]  462 	add	hl, de
    000001BD E5               [16]  463 	push	hl
    000001BE F8 06            [12]  464 	ldhl	sp,	#6
    000001C0 7E               [ 8]  465 	ld	a, (hl)
    000001C1 E1               [12]  466 	pop	hl
    000001C2 77               [ 8]  467 	ld	(hl), a
                                    468 ;sprites/characters.c:82: character->spriteId = spriteId;
    000001C3 79               [ 4]  469 	ld	a, c
    000001C4 12               [ 8]  470 	ld	(de), a
                                    471 ;sprites/characters.c:84: character->spriteTileWidth = tileWidth;
    000001C5 4B               [ 4]  472 	ld	c, e
    000001C6 42               [ 4]  473 	ld	b, d
    000001C7 03               [ 8]  474 	inc	bc
    000001C8 F8 02            [12]  475 	ldhl	sp,	#2
                                    476 ;sprites/characters.c:85: character->spriteTileHeight = tileHeight;
    000001CA 2A               [ 8]  477 	ld	a, (hl+)
    000001CB 02               [ 8]  478 	ld	(bc), a
    000001CC 4B               [ 4]  479 	ld	c, e
    000001CD 42               [ 4]  480 	ld	b, d
    000001CE 03               [ 8]  481 	inc	bc
    000001CF 03               [ 8]  482 	inc	bc
                                    483 ;sprites/characters.c:87: character->spriteFrames = totalFrames;
    000001D0 2A               [ 8]  484 	ld	a, (hl+)
    000001D1 23               [ 8]  485 	inc	hl
    000001D2 02               [ 8]  486 	ld	(bc), a
    000001D3 4B               [ 4]  487 	ld	c, e
    000001D4 42               [ 4]  488 	ld	b, d
    000001D5 03               [ 8]  489 	inc	bc
    000001D6 03               [ 8]  490 	inc	bc
    000001D7 03               [ 8]  491 	inc	bc
    000001D8 7E               [ 8]  492 	ld	a, (hl)
    000001D9 02               [ 8]  493 	ld	(bc), a
                                    494 ;sprites/characters.c:89: loadSpriteFrame(character, 0);
    000001DA AF               [ 4]  495 	xor	a, a
    000001DB CDr00r00         [24]  496 	call	_loadSpriteFrame
                                    497 ;sprites/characters.c:90: }
    000001DE E1               [12]  498 	pop	hl
    000001DF E8 06            [16]  499 	add	sp, #6
    000001E1 E9               [ 4]  500 	jp	(hl)
                                    501 	.area _CODE
                                    502 	.area _INITIALIZER
                                    503 	.area _CABS (ABS)
