                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.1 #15267 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	
                                      7 ;--------------------------------------------------------
                                      8 ; Public variables in this module
                                      9 ;--------------------------------------------------------
                                     10 	.globl _main
                                     11 	.globl _hideCharacterSprites
                                     12 	.globl _loadLoss
                                     13 	.globl _loadWin
                                     14 	.globl _loadTransition
                                     15 	.globl _loadMenu
                                     16 	.globl _loadStart
                                     17 	.globl _playerControl
                                     18 	.globl _loadStage
                                     19 	.globl _setupCharacter
                                     20 	.globl _moveCharacterWithLR
                                     21 	.globl _moveCharacter
                                     22 	.globl _set_sprite_data
                                     23 	.globl _set_bkg_tiles
                                     24 	.globl _set_bkg_data
                                     25 	.globl _wait_vbl_done
                                     26 	.globl _vsync
                                     27 	.globl _joypad
                                     28 ;--------------------------------------------------------
                                     29 ; special function registers
                                     30 ;--------------------------------------------------------
                                     31 ;--------------------------------------------------------
                                     32 ; ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area _DATA
                                     35 ;--------------------------------------------------------
                                     36 ; ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area _INITIALIZED
                                     39 ;--------------------------------------------------------
                                     40 ; absolute external ram data
                                     41 ;--------------------------------------------------------
                                     42 	.area _DABS (ABS)
                                     43 ;--------------------------------------------------------
                                     44 ; global & static initialisations
                                     45 ;--------------------------------------------------------
                                     46 	.area _HOME
                                     47 	.area _GSINIT
                                     48 	.area _GSFINAL
                                     49 	.area _GSINIT
                                     50 ;--------------------------------------------------------
                                     51 ; Home
                                     52 ;--------------------------------------------------------
                                     53 	.area _HOME
                                     54 	.area _HOME
                                     55 ;--------------------------------------------------------
                                     56 ; code
                                     57 ;--------------------------------------------------------
                                     58 	.area _CODE
                                     59 ;src/main.c:8: void main()
                                     60 ;	---------------------------------
                                     61 ; Function main
                                     62 ; ---------------------------------
    00000000                         63 _main::
    00000000 E8 FC            [16]   64 	add	sp, #-4
                                     65 ;src/main.c:12: set_sprite_data(0, viking_tileset_size, viking_tileset);
    00000002 11r00r00         [12]   66 	ld	de, #_viking_tileset
    00000005 D5               [16]   67 	push	de
    00000006 21 00 05         [12]   68 	ld	hl, #0x500
    00000009 E5               [16]   69 	push	hl
    0000000A CDr00r00         [24]   70 	call	_set_sprite_data
    0000000D E8 04            [16]   71 	add	sp, #4
                                     72 ;src/main.c:15: setupCharacter(&player1, 0, 2, 2, 0, 1, viking_tilemap);
    0000000F 01r00r00         [12]   73 	ld	bc, #_viking_tilemap+0
    00000012 11r00r00         [12]   74 	ld	de, #_player1
    00000015 D5               [16]   75 	push	de
    00000016 C5               [16]   76 	push	bc
    00000017 3E 01            [ 8]   77 	ld	a, #0x01
    00000019 F5               [16]   78 	push	af
    0000001A 33               [ 8]   79 	inc	sp
    0000001B AF               [ 4]   80 	xor	a, a
    0000001C 67               [ 4]   81 	ld	h, a
    0000001D 2E 02            [ 8]   82 	ld	l, #0x02
    0000001F E5               [16]   83 	push	hl
    00000020 3E 02            [ 8]   84 	ld	a, #0x02
    00000022 F5               [16]   85 	push	af
    00000023 33               [ 8]   86 	inc	sp
    00000024 AF               [ 4]   87 	xor	a, a
    00000025 CDr00r00         [24]   88 	call	_setupCharacter
    00000028 D1               [12]   89 	pop	de
                                     90 ;src/main.c:18: moveCharacter(&player1, 64, 112);
    00000029 3E 70            [ 8]   91 	ld	a, #0x70
    0000002B F5               [16]   92 	push	af
    0000002C 33               [ 8]   93 	inc	sp
    0000002D 3E 40            [ 8]   94 	ld	a, #0x40
    0000002F CDr00r00         [24]   95 	call	_moveCharacter
                                     96 ;src/main.c:21: set_bkg_data(0,7,Tiles);
    00000032 11r00r00         [12]   97 	ld	de, #_Tiles
    00000035 D5               [16]   98 	push	de
    00000036 21 00 07         [12]   99 	ld	hl, #0x700
    00000039 E5               [16]  100 	push	hl
    0000003A CDr00r00         [24]  101 	call	_set_bkg_data
    0000003D E8 04            [16]  102 	add	sp, #4
                                    103 ;src/main.c:22: set_bkg_tiles(0,0,SCREEN_W,SCREEN_H,TileMap);
    0000003F 11r00r00         [12]  104 	ld	de, #_TileMap
    00000042 D5               [16]  105 	push	de
    00000043 21 14 12         [12]  106 	ld	hl, #0x1214
    00000046 E5               [16]  107 	push	hl
    00000047 AF               [ 4]  108 	xor	a, a
    00000048 0F               [ 4]  109 	rrca
    00000049 F5               [16]  110 	push	af
    0000004A CDr00r00         [24]  111 	call	_set_bkg_tiles
    0000004D E8 06            [16]  112 	add	sp, #6
                                    113 ;src/main.c:29: SHOW_BKG;
    0000004F F0r00            [12]  114 	ldh	a, (_LCDC_REG + 0)
    00000051 F6 01            [ 8]  115 	or	a, #0x01
    00000053 E0r00            [12]  116 	ldh	(_LCDC_REG + 0), a
                                    117 ;src/main.c:30: SHOW_SPRITES;
    00000055 F0r00            [12]  118 	ldh	a, (_LCDC_REG + 0)
    00000057 F6 02            [ 8]  119 	or	a, #0x02
    00000059 E0r00            [12]  120 	ldh	(_LCDC_REG + 0), a
                                    121 ;src/main.c:31: DISPLAY_ON;
    0000005B F0r00            [12]  122 	ldh	a, (_LCDC_REG + 0)
    0000005D F6 80            [ 8]  123 	or	a, #0x80
    0000005F E0r00            [12]  124 	ldh	(_LCDC_REG + 0), a
                                    125 ;src/main.c:33: while (1)
    00000061                        126 00128$:
                                    127 ;src/main.c:15: setupCharacter(&player1, 0, 2, 2, 0, 1, viking_tilemap);
                                    128 ;src/main.c:35: moveCharacterWithLR(&player1);
    00000061 11r00r00         [12]  129 	ld	de, #_player1
    00000064 CDr00r00         [24]  130 	call	_moveCharacterWithLR
                                    131 ;src/main.c:36: buttons = joypad();
    00000067 CDr00r00         [24]  132 	call	_joypad
    0000006A F8 00            [12]  133 	ldhl	sp,	#0
    0000006C 77               [ 8]  134 	ld	(hl), a
                                    135 ;src/main.c:49: if ((buttons & J_START) && (STARTSCREEN == 1)) {
    0000006D 2A               [ 8]  136 	ld	a, (hl+)
    0000006E E6 80            [ 8]  137 	and	a, #0x80
    00000070 77               [ 8]  138 	ld	(hl), a
    00000071 7E               [ 8]  139 	ld	a, (hl)
    00000072 B7               [ 4]  140 	or	a, a
    00000073 28 11            [12]  141 	jr	Z, 00102$
    00000075 21r00r00         [12]  142 	ld	hl, #_STARTSCREEN
    00000078 2A               [ 8]  143 	ld	a, (hl+)
    00000079 3D               [ 4]  144 	dec	a
    0000007A B6               [ 8]  145 	or	a, (hl)
    0000007B 20 09            [12]  146 	jr	NZ, 00102$
                                    147 ;src/main.c:50: loadMenu();
    0000007D CDr00r00         [24]  148 	call	_loadMenu
                                    149 ;src/main.c:51: STARTSCREEN = 0;
    00000080 AF               [ 4]  150 	xor	a, a
    00000081 21r00r00         [12]  151 	ld	hl, #_STARTSCREEN
    00000084 22               [ 8]  152 	ld	(hl+), a
    00000085 77               [ 8]  153 	ld	(hl), a
    00000086                        154 00102$:
                                    155 ;src/main.c:55: if ((buttons & J_A) && (MENUSCREEN == 1)) {
    00000086 F8 00            [12]  156 	ldhl	sp,	#0
    00000088 2A               [ 8]  157 	ld	a, (hl+)
    00000089 23               [ 8]  158 	inc	hl
    0000008A E6 10            [ 8]  159 	and	a, #0x10
    0000008C 77               [ 8]  160 	ld	(hl), a
    0000008D 21r00r00         [12]  161 	ld	hl, #_MENUSCREEN
    00000090 2A               [ 8]  162 	ld	a, (hl+)
    00000091 3D               [ 4]  163 	dec	a
    00000092 B6               [ 8]  164 	or	a, (hl)
    00000093 3E 01            [ 8]  165 	ld	a, #0x01
    00000095 28 01            [12]  166 	jr	Z, 00254$
    00000097 AF               [ 4]  167 	xor	a, a
    00000098                        168 00254$:
    00000098 F8 03            [12]  169 	ldhl	sp,	#3
    0000009A 32               [ 8]  170 	ld	(hl-), a
    0000009B 7E               [ 8]  171 	ld	a, (hl)
    0000009C B7               [ 4]  172 	or	a, a
    0000009D 28 10            [12]  173 	jr	Z, 00108$
    0000009F 23               [ 8]  174 	inc	hl
    000000A0 7E               [ 8]  175 	ld	a, (hl)
    000000A1 B7               [ 4]  176 	or	a, a
    000000A2 28 0B            [12]  177 	jr	Z, 00108$
                                    178 ;src/main.c:56: loadTransition();
    000000A4 CDr00r00         [24]  179 	call	_loadTransition
                                    180 ;src/main.c:57: MENUSCREEN = 0;
    000000A7 AF               [ 4]  181 	xor	a, a
    000000A8 21r00r00         [12]  182 	ld	hl, #_MENUSCREEN
    000000AB 22               [ 8]  183 	ld	(hl+), a
    000000AC 77               [ 8]  184 	ld	(hl), a
    000000AD 18 17            [12]  185 	jr	00109$
    000000AF                        186 00108$:
                                    187 ;src/main.c:58: } else if ((buttons & J_B) && (MENUSCREEN == 1)) {
    000000AF E5               [16]  188 	push	hl
    000000B0 F8 02            [12]  189 	ldhl	sp,	#2
    000000B2 CB 6E            [12]  190 	bit	5, (hl)
    000000B4 E1               [12]  191 	pop	hl
    000000B5 28 0F            [12]  192 	jr	Z, 00109$
    000000B7 F8 03            [12]  193 	ldhl	sp,	#3
    000000B9 7E               [ 8]  194 	ld	a, (hl)
    000000BA B7               [ 4]  195 	or	a, a
    000000BB 28 09            [12]  196 	jr	Z, 00109$
                                    197 ;src/main.c:59: loadStart();
    000000BD CDr00r00         [24]  198 	call	_loadStart
                                    199 ;src/main.c:60: MENUSCREEN = 0;
    000000C0 AF               [ 4]  200 	xor	a, a
    000000C1 21r00r00         [12]  201 	ld	hl, #_MENUSCREEN
    000000C4 22               [ 8]  202 	ld	(hl+), a
    000000C5 77               [ 8]  203 	ld	(hl), a
    000000C6                        204 00109$:
                                    205 ;src/main.c:65: if ((buttons & J_START) && (TRANSITIONSCREEN == 1)) {
    000000C6 F8 01            [12]  206 	ldhl	sp,	#1
    000000C8 7E               [ 8]  207 	ld	a, (hl)
    000000C9 B7               [ 4]  208 	or	a, a
    000000CA 28 11            [12]  209 	jr	Z, 00112$
    000000CC 21r00r00         [12]  210 	ld	hl, #_TRANSITIONSCREEN
    000000CF 2A               [ 8]  211 	ld	a, (hl+)
    000000D0 3D               [ 4]  212 	dec	a
    000000D1 B6               [ 8]  213 	or	a, (hl)
    000000D2 20 09            [12]  214 	jr	NZ, 00112$
                                    215 ;src/main.c:66: loadStage();
    000000D4 CDr00r00         [24]  216 	call	_loadStage
                                    217 ;src/main.c:67: TRANSITIONSCREEN = 0;
    000000D7 AF               [ 4]  218 	xor	a, a
    000000D8 21r00r00         [12]  219 	ld	hl, #_TRANSITIONSCREEN
    000000DB 22               [ 8]  220 	ld	(hl+), a
    000000DC 77               [ 8]  221 	ld	(hl), a
    000000DD                        222 00112$:
                                    223 ;src/main.c:71: if ((buttons & J_UP) && (STAGE == 1)) {
    000000DD 21r00r00         [12]  224 	ld	hl, #_STAGE
    000000E0 2A               [ 8]  225 	ld	a, (hl+)
    000000E1 3D               [ 4]  226 	dec	a
    000000E2 B6               [ 8]  227 	or	a, (hl)
    000000E3 3E 01            [ 8]  228 	ld	a, #0x01
    000000E5 28 01            [12]  229 	jr	Z, 00259$
    000000E7 AF               [ 4]  230 	xor	a, a
    000000E8                        231 00259$:
    000000E8 E5               [16]  232 	push	hl
    000000E9 F8 02            [12]  233 	ldhl	sp,	#2
    000000EB CB 56            [12]  234 	bit	2, (hl)
    000000ED E1               [12]  235 	pop	hl
    000000EE 28 1A            [12]  236 	jr	Z, 00118$
    000000F0 B7               [ 4]  237 	or	a, a
    000000F1 28 17            [12]  238 	jr	Z, 00118$
                                    239 ;src/main.c:72: loadWin();
    000000F3 CDr00r00         [24]  240 	call	_loadWin
                                    241 ;src/main.c:73: STAGE = 0;
    000000F6 AF               [ 4]  242 	xor	a, a
    000000F7 21r00r00         [12]  243 	ld	hl, #_STAGE
    000000FA 22               [ 8]  244 	ld	(hl+), a
    000000FB 77               [ 8]  245 	ld	(hl), a
                                    246 ;src/main.c:74: GAMEPLAY = 0;
    000000FC AF               [ 4]  247 	xor	a, a
    000000FD 21r00r00         [12]  248 	ld	hl, #_GAMEPLAY
    00000100 22               [ 8]  249 	ld	(hl+), a
    00000101 77               [ 8]  250 	ld	(hl), a
                                    251 ;src/main.c:75: hideCharacterSprites(&player1);
    00000102 11r00r00         [12]  252 	ld	de, #_player1
    00000105 CDr00r00         [24]  253 	call	_hideCharacterSprites
    00000108 18 20            [12]  254 	jr	00119$
    0000010A                        255 00118$:
                                    256 ;src/main.c:76: } else if ((buttons & J_DOWN) && (STAGE == 1)) {
    0000010A E5               [16]  257 	push	hl
    0000010B F8 02            [12]  258 	ldhl	sp,	#2
    0000010D CB 5E            [12]  259 	bit	3, (hl)
    0000010F E1               [12]  260 	pop	hl
    00000110 28 18            [12]  261 	jr	Z, 00119$
    00000112 B7               [ 4]  262 	or	a, a
    00000113 28 15            [12]  263 	jr	Z, 00119$
                                    264 ;src/main.c:77: loadLoss();
    00000115 CDr00r00         [24]  265 	call	_loadLoss
                                    266 ;src/main.c:78: STAGE = 0;
    00000118 AF               [ 4]  267 	xor	a, a
    00000119 21r00r00         [12]  268 	ld	hl, #_STAGE
    0000011C 22               [ 8]  269 	ld	(hl+), a
    0000011D 77               [ 8]  270 	ld	(hl), a
                                    271 ;src/main.c:79: GAMEPLAY = 0;
    0000011E AF               [ 4]  272 	xor	a, a
    0000011F 21r00r00         [12]  273 	ld	hl, #_GAMEPLAY
    00000122 22               [ 8]  274 	ld	(hl+), a
    00000123 77               [ 8]  275 	ld	(hl), a
                                    276 ;src/main.c:80: hideCharacterSprites(&player1);
    00000124 11r00r00         [12]  277 	ld	de, #_player1
    00000127 CDr00r00         [24]  278 	call	_hideCharacterSprites
    0000012A                        279 00119$:
                                    280 ;src/main.c:85: if ((buttons & J_A) && (WINSCREEN == 1)) {
    0000012A F8 02            [12]  281 	ldhl	sp,	#2
    0000012C 7E               [ 8]  282 	ld	a, (hl)
    0000012D B7               [ 4]  283 	or	a, a
    0000012E 28 11            [12]  284 	jr	Z, 00122$
    00000130 21r00r00         [12]  285 	ld	hl, #_WINSCREEN
    00000133 2A               [ 8]  286 	ld	a, (hl+)
    00000134 3D               [ 4]  287 	dec	a
    00000135 B6               [ 8]  288 	or	a, (hl)
    00000136 20 09            [12]  289 	jr	NZ, 00122$
                                    290 ;src/main.c:86: loadStart();
    00000138 CDr00r00         [24]  291 	call	_loadStart
                                    292 ;src/main.c:87: WINSCREEN = 0;
    0000013B AF               [ 4]  293 	xor	a, a
    0000013C 21r00r00         [12]  294 	ld	hl, #_WINSCREEN
    0000013F 22               [ 8]  295 	ld	(hl+), a
    00000140 77               [ 8]  296 	ld	(hl), a
    00000141                        297 00122$:
                                    298 ;src/main.c:91: if ((buttons & J_A) && (LOSESCREEN == 1)) {
    00000141 F8 02            [12]  299 	ldhl	sp,	#2
    00000143 7E               [ 8]  300 	ld	a, (hl)
    00000144 B7               [ 4]  301 	or	a, a
    00000145 28 11            [12]  302 	jr	Z, 00125$
    00000147 21r00r00         [12]  303 	ld	hl, #_LOSESCREEN
    0000014A 2A               [ 8]  304 	ld	a, (hl+)
    0000014B 3D               [ 4]  305 	dec	a
    0000014C B6               [ 8]  306 	or	a, (hl)
    0000014D 20 09            [12]  307 	jr	NZ, 00125$
                                    308 ;src/main.c:92: loadStart();
    0000014F CDr00r00         [24]  309 	call	_loadStart
                                    310 ;src/main.c:93: LOSESCREEN = 0;
    00000152 AF               [ 4]  311 	xor	a, a
    00000153 21r00r00         [12]  312 	ld	hl, #_LOSESCREEN
    00000156 22               [ 8]  313 	ld	(hl+), a
    00000157 77               [ 8]  314 	ld	(hl), a
    00000158                        315 00125$:
                                    316 ;src/main.c:96: playerControl();
    00000158 CDr00r00         [24]  317 	call	_playerControl
                                    318 ;src/main.c:99: wait_vbl_done();
    0000015B CDr00r00         [24]  319 	call	_wait_vbl_done
                                    320 ;src/main.c:102: vsync();
    0000015E CDr00r00         [24]  321 	call	_vsync
    00000161 C3r61r00         [16]  322 	jp	00128$
                                    323 ;src/main.c:104: }
    00000164 E8 04            [16]  324 	add	sp, #4
    00000166 C9               [16]  325 	ret
                                    326 	.area _CODE
                                    327 	.area _INITIALIZER
                                    328 	.area _CABS (ABS)
