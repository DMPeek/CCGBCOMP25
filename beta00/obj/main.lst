                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler
                                      3 ; Version 4.5.1 #15267 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	
                                      7 ;--------------------------------------------------------
                                      8 ; Public variables in this module
                                      9 ;--------------------------------------------------------
                                     10 	.globl _main
                                     11 	.globl _loadStart
                                     12 	.globl _playerControl
                                     13 	.globl _loadStage
                                     14 	.globl _setupCharacter
                                     15 	.globl _moveCharacterWithLR
                                     16 	.globl _moveCharacter
                                     17 	.globl _set_sprite_data
                                     18 	.globl _set_bkg_tiles
                                     19 	.globl _set_bkg_data
                                     20 	.globl _wait_vbl_done
                                     21 	.globl _vsync
                                     22 	.globl _joypad
                                     23 ;--------------------------------------------------------
                                     24 ; special function registers
                                     25 ;--------------------------------------------------------
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area _DATA
                                     30 ;--------------------------------------------------------
                                     31 ; ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area _INITIALIZED
                                     34 ;--------------------------------------------------------
                                     35 ; absolute external ram data
                                     36 ;--------------------------------------------------------
                                     37 	.area _DABS (ABS)
                                     38 ;--------------------------------------------------------
                                     39 ; global & static initialisations
                                     40 ;--------------------------------------------------------
                                     41 	.area _HOME
                                     42 	.area _GSINIT
                                     43 	.area _GSFINAL
                                     44 	.area _GSINIT
                                     45 ;--------------------------------------------------------
                                     46 ; Home
                                     47 ;--------------------------------------------------------
                                     48 	.area _HOME
                                     49 	.area _HOME
                                     50 ;--------------------------------------------------------
                                     51 ; code
                                     52 ;--------------------------------------------------------
                                     53 	.area _CODE
                                     54 ;src/main.c:8: void main()
                                     55 ;	---------------------------------
                                     56 ; Function main
                                     57 ; ---------------------------------
    00000000                         58 _main::
                                     59 ;src/main.c:12: set_sprite_data(0, viking_tileset_size, viking_tileset);
    00000000 11r00r00         [12]   60 	ld	de, #_viking_tileset
    00000003 D5               [16]   61 	push	de
    00000004 21 00 05         [12]   62 	ld	hl, #0x500
    00000007 E5               [16]   63 	push	hl
    00000008 CDr00r00         [24]   64 	call	_set_sprite_data
    0000000B E8 04            [16]   65 	add	sp, #4
                                     66 ;src/main.c:15: setupCharacter(&player1, 0, 2, 2, 0, 1, viking_tilemap);
    0000000D 01r00r00         [12]   67 	ld	bc, #_viking_tilemap+0
    00000010 11r00r00         [12]   68 	ld	de, #_player1
    00000013 D5               [16]   69 	push	de
    00000014 C5               [16]   70 	push	bc
    00000015 3E 01            [ 8]   71 	ld	a, #0x01
    00000017 F5               [16]   72 	push	af
    00000018 33               [ 8]   73 	inc	sp
    00000019 AF               [ 4]   74 	xor	a, a
    0000001A 67               [ 4]   75 	ld	h, a
    0000001B 2E 02            [ 8]   76 	ld	l, #0x02
    0000001D E5               [16]   77 	push	hl
    0000001E 3E 02            [ 8]   78 	ld	a, #0x02
    00000020 F5               [16]   79 	push	af
    00000021 33               [ 8]   80 	inc	sp
    00000022 AF               [ 4]   81 	xor	a, a
    00000023 CDr00r00         [24]   82 	call	_setupCharacter
    00000026 D1               [12]   83 	pop	de
                                     84 ;src/main.c:18: moveCharacter(&player1, 64, 112);
    00000027 3E 70            [ 8]   85 	ld	a, #0x70
    00000029 F5               [16]   86 	push	af
    0000002A 33               [ 8]   87 	inc	sp
    0000002B 3E 40            [ 8]   88 	ld	a, #0x40
    0000002D CDr00r00         [24]   89 	call	_moveCharacter
                                     90 ;src/main.c:21: set_bkg_data(0,7,Tiles);
    00000030 11r00r00         [12]   91 	ld	de, #_Tiles
    00000033 D5               [16]   92 	push	de
    00000034 21 00 07         [12]   93 	ld	hl, #0x700
    00000037 E5               [16]   94 	push	hl
    00000038 CDr00r00         [24]   95 	call	_set_bkg_data
    0000003B E8 04            [16]   96 	add	sp, #4
                                     97 ;src/main.c:22: set_bkg_tiles(0,0,SCREEN_W,SCREEN_H,TileMap);
    0000003D 11r00r00         [12]   98 	ld	de, #_TileMap
    00000040 D5               [16]   99 	push	de
    00000041 21 14 12         [12]  100 	ld	hl, #0x1214
    00000044 E5               [16]  101 	push	hl
    00000045 AF               [ 4]  102 	xor	a, a
    00000046 0F               [ 4]  103 	rrca
    00000047 F5               [16]  104 	push	af
    00000048 CDr00r00         [24]  105 	call	_set_bkg_tiles
    0000004B E8 06            [16]  106 	add	sp, #6
                                    107 ;src/main.c:27: loadStart();
    0000004D CDr00r00         [24]  108 	call	_loadStart
                                    109 ;src/main.c:29: SHOW_BKG;
    00000050 F0r00            [12]  110 	ldh	a, (_LCDC_REG + 0)
    00000052 F6 01            [ 8]  111 	or	a, #0x01
    00000054 E0r00            [12]  112 	ldh	(_LCDC_REG + 0), a
                                    113 ;src/main.c:30: SHOW_SPRITES;
    00000056 F0r00            [12]  114 	ldh	a, (_LCDC_REG + 0)
    00000058 F6 02            [ 8]  115 	or	a, #0x02
    0000005A E0r00            [12]  116 	ldh	(_LCDC_REG + 0), a
                                    117 ;src/main.c:31: DISPLAY_ON;
    0000005C F0r00            [12]  118 	ldh	a, (_LCDC_REG + 0)
    0000005E F6 80            [ 8]  119 	or	a, #0x80
    00000060 E0r00            [12]  120 	ldh	(_LCDC_REG + 0), a
                                    121 ;src/main.c:33: while (1)
    00000062                        122 00105$:
                                    123 ;src/main.c:35: moveCharacterWithLR(&player1);
    00000062 11r00r00         [12]  124 	ld	de, #_player1
    00000065 CDr00r00         [24]  125 	call	_moveCharacterWithLR
                                    126 ;src/main.c:36: buttons = joypad();
    00000068 CDr00r00         [24]  127 	call	_joypad
                                    128 ;src/main.c:65: if ((buttons & J_START) && (TRANSITIONSCREEN == 1)) {
    0000006B 07               [ 4]  129 	rlca
    0000006C 30 11            [12]  130 	jr	NC, 00102$
    0000006E 21r00r00         [12]  131 	ld	hl, #_TRANSITIONSCREEN
    00000071 2A               [ 8]  132 	ld	a, (hl+)
    00000072 3D               [ 4]  133 	dec	a
    00000073 B6               [ 8]  134 	or	a, (hl)
    00000074 20 09            [12]  135 	jr	NZ, 00102$
                                    136 ;src/main.c:66: loadStage();
    00000076 CDr00r00         [24]  137 	call	_loadStage
                                    138 ;src/main.c:67: TRANSITIONSCREEN = 0;
    00000079 AF               [ 4]  139 	xor	a, a
    0000007A 21r00r00         [12]  140 	ld	hl, #_TRANSITIONSCREEN
    0000007D 22               [ 8]  141 	ld	(hl+), a
    0000007E 77               [ 8]  142 	ld	(hl), a
    0000007F                        143 00102$:
                                    144 ;src/main.c:96: playerControl();
    0000007F CDr00r00         [24]  145 	call	_playerControl
                                    146 ;src/main.c:99: wait_vbl_done();
    00000082 CDr00r00         [24]  147 	call	_wait_vbl_done
                                    148 ;src/main.c:102: vsync();
    00000085 CDr00r00         [24]  149 	call	_vsync
                                    150 ;src/main.c:104: }
    00000088 18 D8            [12]  151 	jr	00105$
                                    152 	.area _CODE
                                    153 	.area _INITIALIZER
                                    154 	.area _CABS (ABS)
